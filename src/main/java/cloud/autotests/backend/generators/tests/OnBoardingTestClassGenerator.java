package cloud.autotests.backend.generators.tests;

import cloud.autotests.backend.models.request.Test;
import cloud.autotests.backend.models.request.Tests;
import lombok.extern.slf4j.Slf4j;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;

import java.util.List;

import static cloud.autotests.backend.generators.tests.TestClassStructureGenerator.*;
import static cloud.autotests.backend.generators.tests.TestStepsGenerator.*;
import static cloud.autotests.backend.utils.HtmlUtils.getHtmlFromUrl;
import static cloud.autotests.backend.utils.HtmlUtils.getTitleValue;
import static cloud.autotests.backend.utils.RegexpUtils.getUrlsFromOrder;

@Slf4j
public class OnBoardingTestClassGenerator {

    public static String generateOnBoardingTestClass(Tests tests, String testClassNamePrefix, String title) { // todo add link to Jira issue
        log.info("[START] Generate on boarding test class {}", title);

        StringBuilder testMethods = new StringBuilder();

        testMethods.append(generateFromStepsTestMethod(tests, title));
        if(tests.isTitleCheck() || tests.isConsoleCheck()) {
            testMethods.append(generateFromUrlTestMethods(tests));
        }

        String result = generateTestClass(testClassNamePrefix, testMethods.toString()); // todo add classDependencyGenerator

        log.info("[FINISH] Generate on boarding test class {}", result);

        return result;
    }

    public static String generateFromStepsTestMethod(Tests tests, String title) { // todo add link to Jira issue
        log.info("[START] Generate from steps test method {}", title);

        String testMethodDescription = "Soon to be implemented by you (or QA.GURU engineers)";
        String testMethodNamePrefix = "generated";

        StringBuilder testSteps = new StringBuilder();
        List<Test> steps = tests.getTest();
        for (Test step : steps) {
            testSteps.append(
                    generateTestStep(step.getTitle(), step.getStep()));
        }

        String result = generateTestMethod(testMethodDescription, title,
                testMethodNamePrefix, testSteps.toString());

        log.info("[FINISH] Generate from steps test method {}", result);

        return result;
    }

    //todo Check page title url  1 row
    public static String generateFromUrlTestMethods(Tests tests) {
        log.info("[START] Generate from url test methods");

        List<String> urls = getUrlsFromOrder(tests.getTest());

        if (urls.size() == 0)
            return "";

        String url = urls.get(0);
        String htmlBody = getHtmlFromUrl(url);
        if (htmlBody.isEmpty())
            return "";

        Document htmlDom = Jsoup.parse(htmlBody);

        StringBuilder testMethods = new StringBuilder();

        if(tests.isTitleCheck()) {
            testMethods.append(generateTitleTestMethod(htmlDom, url));
        }

        if(tests.isConsoleCheck()) {
            testMethods.append(generateConsoleErrorTestMethod(url));
        }

        log.info("[FINISH] Generate from url test methods");
        return testMethods.toString();
    }

    public static String generateTitleTestMethod(Document htmlDom, String url) {
        log.info("[START] Generate title test methods");

        String titleValue = getTitleValue(htmlDom);
        if (titleValue.isEmpty())
            return "";

        String testMethodDescription = "Autogenerated test";
        String testMethodDisplayName = "Page title should have header text";
        String testMethodNamePrefix = "title";

        StringBuilder testSteps = new StringBuilder();
        testSteps.append(generateOpenPageStep(url));
        testSteps.append(generateCheckTitleStep(titleValue));

        String result = generateTestMethod(testMethodDescription, testMethodDisplayName,
                testMethodNamePrefix, testSteps.toString());

        log.info("[FINISH] Generate title test methods {}", result);

        return result;
    }

    public static String generateConsoleErrorTestMethod(String url) {
        log.info("[START] Generate console error test methods");

        String testMethodDescription = "Autogenerated test";
        String testMethodDisplayName = "Page console log should not have errors";
        String testMethodNamePrefix = "consoleShouldNotHaveErrors";

        StringBuilder testSteps = new StringBuilder();
        testSteps.append(generateOpenPageStep(url));
        testSteps.append(generateCheckConsoleErrorStep());

        String result = generateTestMethod(testMethodDescription, testMethodDisplayName,
                testMethodNamePrefix, testSteps.toString());

        log.info("[FINISH] Generate console error methods {}", result);

        return result;
    }
}
