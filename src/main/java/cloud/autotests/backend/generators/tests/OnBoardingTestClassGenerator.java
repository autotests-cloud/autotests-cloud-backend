package cloud.autotests.backend.generators.tests;

import cloud.autotests.backend.models.Order;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

import static cloud.autotests.backend.generators.tests.TestClassStructureGenerator.*;
import static cloud.autotests.backend.generators.tests.TestStepsGenerator.*;
import static cloud.autotests.backend.utils.HtmlUtils.getHtmlFromUrl;
import static cloud.autotests.backend.utils.HtmlUtils.getTitleValue;
import static cloud.autotests.backend.utils.RegexpUtils.getUrlsFromOrder;

public class OnBoardingTestClassGenerator {
    private static final Logger LOG = LoggerFactory.getLogger(OnBoardingTestClassGenerator.class);


    public static String generateOnBoardingTestClass(String testClassNamePrefix, Order order) { // todo add link to Jira issue
        StringBuilder testMethods = new StringBuilder();
        testMethods.append(generateFromStepsTestMethod(order));
        testMethods.append(generateFromUrlTestMethods(order));

        return generateTestClass(testClassNamePrefix, testMethods.toString()); // todo add classDependencyGenerator
    }

    public static String generateFromStepsTestMethod(Order order) { // todo add link to Jira issue
        String testMethodDescription = "Soon to be implemented by you (or QA.GURU engineers)";
        String testMethodNamePrefix = "generated";
        String stepContent = "step(\"// todo: just add selenium action\");";

        StringBuilder testSteps = new StringBuilder();
        String[] steps = order.getSteps().split("\n");
        for (String stepDescription : steps) {
            testSteps.append(
                    generateTestStep(stepDescription, stepContent));
        }

        return generateTestMethod(testMethodDescription, order.getTitle(),
                testMethodNamePrefix, testSteps.toString());
    }

    public static String generateFromUrlTestMethods(Order order) {
        List<String> urls = getUrlsFromOrder(order.getSteps());
        if (urls.size() == 0)
            return "";

        String url = urls.get(0);
        String htmlBody = getHtmlFromUrl(url);
        if (htmlBody.isEmpty())
            return "";

        Document htmlDom = Jsoup.parse(htmlBody);

        StringBuilder testMethods = new StringBuilder();
        testMethods.append(generateTitleTestMethod(htmlDom, url));
        testMethods.append(generateConsoleErrorTestMethod(url));
//        testMethods.append(generateHeaderTestMethods(order, htmlDom));

        return testMethods.toString();
    }

    public static String generateTitleTestMethod(Document htmlDom, String url) {
        String titleValue = getTitleValue(htmlDom);
        if (titleValue.isEmpty())
            return "";

        String testMethodDescription = "Autogenerated test";
        String testMethodDisplayName = "Page title should have header text";
        String testMethodNamePrefix = "title";

        StringBuilder testSteps = new StringBuilder();
        testSteps.append(generateOpenPageStep(url));
        testSteps.append(generateCheckTitleStep(titleValue));

        return generateTestMethod(testMethodDescription, testMethodDisplayName,
                testMethodNamePrefix, testSteps.toString());
    }

    public static String generateConsoleErrorTestMethod(String url) {
        String testMethodDescription = "Autogenerated test";
        String testMethodDisplayName = "Page console log should not have errors";
        String testMethodNamePrefix = "consoleShouldNotHaveErrors";

        StringBuilder testSteps = new StringBuilder();
        testSteps.append(generateOpenPageStep(url));
        testSteps.append(generateCheckConsoleErrorStep());

        return generateTestMethod(testMethodDescription, testMethodDisplayName,
                testMethodNamePrefix, testSteps.toString());
    }

    public static String generateHeaderTestMethods(Order order, Document htmlDom) {

        return "";
    }

}
